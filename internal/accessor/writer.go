package accessor

import (
	"bytes"
	"fmt"
	"go/format"

	"github.com/spf13/afero"
)

type writer struct {
	buf        *bytes.Buffer
	fs         afero.Fs
	outputFile string
}

func newWriter(fs afero.Fs, outputFile string) *writer {
	return &writer{
		buf:        new(bytes.Buffer),
		fs:         fs,
		outputFile: outputFile,
	}
}

func (w *writer) printf(format string, args ...interface{}) {
	fmt.Fprintf(w.buf, format, args...)
}

func (w *writer) write(pkgName string, imports []string, accessors []string) error {
	w.printf("// Code generated by accessory; DO NOT EDIT.\n")
	w.printf("\n")
	w.printf("package %s\n", pkgName)
	w.printf("\n")

	if len(imports) > 0 {
		w.printf("import (\n")
		for i := range imports {
			w.printf("\t%s\n", imports[i])
		}
		w.printf(")\n")
	}

	for i := range accessors {
		w.printf("%s\n", accessors[i])
	}

	content, err := w.format()
	if err != nil {
		return err
	}

	return afero.WriteFile(w.fs, w.outputFile, content, 0644)
}

func (w *writer) format() ([]byte, error) {
	src, err := format.Source(w.buf.Bytes())
	if err != nil {
		return w.buf.Bytes(), err
	}
	return src, nil
}
